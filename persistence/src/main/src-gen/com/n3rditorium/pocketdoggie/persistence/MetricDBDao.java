package com.n3rditorium.pocketdoggie.persistence;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.n3rditorium.pocketdoggie.persistence.MetricDB;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "METRIC_DB".
*/
public class MetricDBDao extends AbstractDao<MetricDB, Long> {

    public static final String TABLENAME = "METRIC_DB";

    /**
     * Properties of entity MetricDB.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property DogId = new Property(1, Long.class, "dogId", false, "DOG_ID");
        public final static Property Value = new Property(2, Integer.class, "value", false, "VALUE");
        public final static Property UnitId = new Property(3, Integer.class, "unitId", false, "UNIT_ID");
        public final static Property Timestamp = new Property(4, Long.class, "timestamp", false, "TIMESTAMP");
    };


    public MetricDBDao(DaoConfig config) {
        super(config);
    }
    
    public MetricDBDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"METRIC_DB\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"DOG_ID\" INTEGER," + // 1: dogId
                "\"VALUE\" INTEGER," + // 2: value
                "\"UNIT_ID\" INTEGER," + // 3: unitId
                "\"TIMESTAMP\" INTEGER);"); // 4: timestamp
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"METRIC_DB\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, MetricDB entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long dogId = entity.getDogId();
        if (dogId != null) {
            stmt.bindLong(2, dogId);
        }
 
        Integer value = entity.getValue();
        if (value != null) {
            stmt.bindLong(3, value);
        }
 
        Integer unitId = entity.getUnitId();
        if (unitId != null) {
            stmt.bindLong(4, unitId);
        }
 
        Long timestamp = entity.getTimestamp();
        if (timestamp != null) {
            stmt.bindLong(5, timestamp);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public MetricDB readEntity(Cursor cursor, int offset) {
        MetricDB entity = new MetricDB( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // dogId
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // value
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // unitId
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4) // timestamp
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, MetricDB entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDogId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setValue(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setUnitId(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setTimestamp(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(MetricDB entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(MetricDB entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
