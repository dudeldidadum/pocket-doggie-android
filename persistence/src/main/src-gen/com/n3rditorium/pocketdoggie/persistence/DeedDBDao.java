package com.n3rditorium.pocketdoggie.persistence;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.n3rditorium.pocketdoggie.persistence.DeedDB;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DEED_DB".
*/
public class DeedDBDao extends AbstractDao<DeedDB, Long> {

    public static final String TABLENAME = "DEED_DB";

    /**
     * Properties of entity DeedDB.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property DogId = new Property(1, Long.class, "dogId", false, "DOG_ID");
        public final static Property Type = new Property(2, Integer.class, "type", false, "TYPE");
        public final static Property Description = new Property(3, String.class, "description", false, "DESCRIPTION");
        public final static Property Inside = new Property(4, Boolean.class, "inside", false, "INSIDE");
        public final static Property Timestamp = new Property(5, Long.class, "timestamp", false, "TIMESTAMP");
        public final static Property Latitude = new Property(6, Long.class, "latitude", false, "LATITUDE");
        public final static Property Longitude = new Property(7, Long.class, "longitude", false, "LONGITUDE");
    };


    public DeedDBDao(DaoConfig config) {
        super(config);
    }
    
    public DeedDBDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DEED_DB\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"DOG_ID\" INTEGER," + // 1: dogId
                "\"TYPE\" INTEGER," + // 2: type
                "\"DESCRIPTION\" TEXT," + // 3: description
                "\"INSIDE\" INTEGER," + // 4: inside
                "\"TIMESTAMP\" INTEGER," + // 5: timestamp
                "\"LATITUDE\" INTEGER," + // 6: latitude
                "\"LONGITUDE\" INTEGER);"); // 7: longitude
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DEED_DB\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, DeedDB entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long dogId = entity.getDogId();
        if (dogId != null) {
            stmt.bindLong(2, dogId);
        }
 
        Integer type = entity.getType();
        if (type != null) {
            stmt.bindLong(3, type);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(4, description);
        }
 
        Boolean inside = entity.getInside();
        if (inside != null) {
            stmt.bindLong(5, inside ? 1L: 0L);
        }
 
        Long timestamp = entity.getTimestamp();
        if (timestamp != null) {
            stmt.bindLong(6, timestamp);
        }
 
        Long latitude = entity.getLatitude();
        if (latitude != null) {
            stmt.bindLong(7, latitude);
        }
 
        Long longitude = entity.getLongitude();
        if (longitude != null) {
            stmt.bindLong(8, longitude);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public DeedDB readEntity(Cursor cursor, int offset) {
        DeedDB entity = new DeedDB( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // dogId
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // type
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // description
            cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0, // inside
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // timestamp
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6), // latitude
            cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7) // longitude
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, DeedDB entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDogId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setType(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setDescription(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setInside(cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0);
        entity.setTimestamp(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setLatitude(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
        entity.setLongitude(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(DeedDB entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(DeedDB entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
